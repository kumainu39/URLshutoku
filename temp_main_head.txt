from __future__ import annotations

import asyncio
import sys
import uuid
from pathlib import Path
from typing import Optional

from fastapi import FastAPI, Form, Request
from fastapi.responses import FileResponse, HTMLResponse, Response
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from loguru import logger

from . import db
from .config import Settings, get_settings
from .services.pipeline import CrawlPipeline, JobConfig, JobManager, JobState


# Configure app
app = FastAPI(title="URL蜿門ｾ玲髪謠ｴ繝・・繝ｫ")
templates = Jinja2Templates(directory=str(Path(__file__).parent / "templates"))
app.mount("/static", StaticFiles(directory=str(Path(__file__).parent / "static")), name="static")


# Ensure Loguru outputs UTF-8 on Windows consoles
logger.remove()
logger.add(sys.stderr, encoding="utf-8")


# Managers
job_manager = JobManager()
pipeline = CrawlPipeline()


@app.get("/", response_class=HTMLResponse)
async def index(request: Request) -> HTMLResponse:
    settings: Settings = get_settings()
    prefectures = db.fetch_prefectures(pipeline.engine)
    return templates.TemplateResponse(
        "index.html",
        {
            "request": request,
            "jobs": job_manager.jobs,
            "settings": settings,
            "prefectures": prefectures,
        },
    )


@app.post("/jobs", response_class=HTMLResponse)
async def create_job(
    request: Request,
    prefecture: Optional[str] = Form(default=None),
    limit: Optional[int] = Form(default=None),
    chunk_size: int = Form(default=100),
    concurrency: int = Form(default=5),
    skip_existing: Optional[str] = Form(default=None),
) -> HTMLResponse:
    job_id = str(uuid.uuid4())
    chunk_size = max(1, chunk_size)
    concurrency = max(1, concurrency)
    config = JobConfig(
        prefecture=prefecture or None,
        limit=limit,
        chunk_size=chunk_size,
        concurrency=concurrency,
        skip_existing=bool(skip_existing),
    )
    settings = get_settings()
    settings.concurrency_limit = concurrency  # type: ignore[attr-defined]
    state = JobState(job_id=job_id, config=config)
    await job_manager.create_job(state)

    async def _run_job() -> None:
        logger.info("繧ｸ繝ｧ繝夜幕蟋・{job_id}", job_id=job_id)
        await pipeline.run(state, on_update=lambda _: None)
        logger.info("繧ｸ繝ｧ繝也ｵゆｺ・{job_id}", job_id=job_id)

    asyncio.create_task(_run_job())

    return templates.TemplateResponse(
        "job.html",
        {"request": request, "job": state},
    )


@app.get("/jobs/{job_id}", response_class=HTMLResponse)
async def job_detail(request: Request, job_id: str) -> HTMLResponse:
    job = job_manager.get(job_id)
    if job is None:
        return HTMLResponse(content="繧ｸ繝ｧ繝悶′隕九▽縺九ｊ縺ｾ縺帙ｓ", status_code=404)
    return templates.TemplateResponse("job.html", {"request": request, "job": job})


@app.get("/favicon.ico", include_in_schema=False)
def favicon() -> Response:
    svg_path = Path(__file__).parent / "static" / "favicon.svg"
    if svg_path.exists():
        return FileResponse(svg_path, media_type="image/svg+xml")
    return Response(status_code=204)

